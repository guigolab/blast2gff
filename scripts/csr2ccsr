#! /usr/local/bin/gawk -f
# rgs, sb 1998 
# csr2ccsr.awk conects contiguos regions of similarity (csr)
# gawk -f csr2ccsr.awk 'file.csr'
#
# NOTES:
# - csr file must be sorted by increasing start position
# - does not connect csr in different strands (should or should not?)

BEGIN{
  #defines
  # field separators
  FS=";"; 
  FS_2=" ";
  OFS_2="#";

  # data structure -----------------------------------------------------
  #fields (FS)
  dbpr  = 1; # method. database-program
  csr   = 2; # continuos similarity region
  srs   = 3; # similarity regions
  locus = 4;

  #subfields (FS_2)
  #dbpr
  dbpr_program =  1;
  dbpr_database = 2;

  
  #csr
  start   =  1; # hsp start in query
  end     =  2; # hsp end in query
  strand  =  3; # query strand
  frame   =  4; # query frame
  score   =  5; # hsp score
  prob    =  6; # sim score
  iden    =  7; # probability score

  # end data structure --------------------------------------------------

  ccsr_end = 5; # avoid conflicting other indexes
  ccsr_start = 6; # avoid conflicting other indexes
}
{
  split($dbsr,dbpr_,FS_2);
  program = dbpr_[dbpr_program];
  db= dbpr_[dbpr_database];
  programs[program]  = 1;
  databases[db]= 1;
 
  split($csr,csr_,FS_2);
  strands[csr_[strand]]=1;

  for (i=1;i<=nccsr[program,db,csr_[strand]];i++) {

    if (comm(ccsr[program,db,i,csr_[strand],locus], $locus)) {
      ccsr[program,db,i,csr_[strand],ccsr_end]=max(ccsr[program,db,i,csr_[strand],ccsr_end],csr_[end]);
      ccsr[program,db,i,csr_[strand],ccsr_start]=min(ccsr[program,db,i,csr_[strand],ccsr_start],csr_[start]);
      ccsr[program,db,i,csr_[strand],csr] = ccsr[program,db,i,csr_[strand],csr] " " FS " " csr_[start] " " csr_[end] " " csr_[strand] " " csr_[frame] " " csr_[score] " " csr_[prob] " " csr_[iden] " " FS " " $srs;
     ccsr[program,db,i,csr_[strand],locus] = merge(ccsr[program,db,i,csr_[strand],locus],$locus);
     next;
    }
  }

  nccsr[program,db,csr_[strand]]++;
  ccsr[program,db,nccsr[program,db,csr_[strand]],csr_[strand],ccsr_start]=csr_[start];
  ccsr[program,db,nccsr[program,db,csr_[strand]],csr_[strand],ccsr_end]=csr_[end];
  ccsr[program,db,nccsr[program,db,csr_[strand]],csr_[strand],csr] = csr_[start] " " csr_[end] " " csr_[strand] " " csr_[frame] " " csr_[score] " " csr_[prob] " " csr_[iden] " " FS " " $srs;
  ccsr[program,db,nccsr[program,db,csr_[strand]],csr_[strand],locus] =$locus;

}

END {
  for (p in programs)
    for (d in databases)
      for (s in strands)
	for (i=1;i<=nccsr[p,d,s];i++)
      print p, d, OFS_2, ccsr[p,d,i,s,ccsr_start], ccsr[p,d,i,s,ccsr_end], s, OFS_2, ccsr[p,d,i,s,csr], OFS_2, ccsr[p,d,i,s,locus];
}

function max(a,b){
  return a+0 > b+0 ? a : b; #to coerce it into an integer
}

function min(a,b){
  return a+0 < b+0 ? a : b; #to coerce it into an integer
}


function cat(s,r) { # concatenates r to s if r is not in s
  return index(s,r) > 0 ? s : s " " r " ";
}

function merge(bs,br) { # union of sequences of strings bs and br
  split (bs,x," ");
  for (l in x)
    br=cat(br,x[l]);
  return br
}
function comm(bs,br) { # returns 1 if br and bs have strings in common, 0 otherwise.
  r=0;
  split (bs, x, " ");
  for (l in x)
    if (index(br,x[l])>0)
      return 1
  return 0;
}
