#! /bin/sh
# blast2gff converts blast file to gff file
# 
# modelled after parseblast. Needs to be rewritten 
# rgs, sb, july 1998. spt 1998

trap 'rm -f $TMP/$$.*; exit 1' 0 1 2 3 9 15 

# -- defaults ----------------------------------------------------------
TMP=/tmp
OFN=$TMP/$$


S_CUTOFF=0;
P_CUTOFF=1;
I_CUTOFF=0;
L_CUTOFF=0;
OFFSET=0;

MINLQUERY=1000; #minimum value passed as -m to PlotSeqComp.sh

UG_FILE=$OFN.ug #dummy unigene file

#fields. Depending on data structure convention
HSP_STRAND=5;
HSP_FRAME=6;

# 
HSP_GROUP="hsp";

USAGE="blast2gff [-cdefFS] [-s score_cutoff] [-p probability_cutoff] [-i similarity_cutoff] [-l lengt_cutoff] [-k ouput_prefix] [-g ps_prefix] [-r cds_file] [-u est2unigenefile] \n\n -c \t includes projected hsps in gff file \n -d \t includes hsp in the gff file \n -e \t est mode \n -f \t ignores frame when building csr's \n -F \t ignores frame when building sr's\n -S \t ignores strand\n";

# -- options ----------------------------------------------------------

while getopts k:s:p:i:l:cdeSFfg:r:u:j:m:h opt
do
    case $opt in
	c) HSPGFF=1;;               # includes projected hsps in gff file
	d) HSPGFFG=1;;              # includes hsp in the gff file
	e) EST=1;;                  # est mode 
	f) NOFRAME_G=1;;            # ignore frame when building csr's
	g) PSC=1;PSC_FILE=$OPTARG;; # PlotSeqCom
	i) I_CUTOFF=$OPTARG;;
	k) KOF=1;OFN=$OPTARG;;      # keep intermediate files in $OFN
	l) L_CUTOFF=$OPTARG;;
	p) P_CUTOFF=$OPTARG;;
	r) RG=1;RG_FILE=$OPTARG;;   # real gene for PlotSeqCom
	s) S_CUTOFF=$OPTARG;;  
	u) UG=1;UG_FILE=$OPTARG;;   # est2unigene file, only makes sense if -e
	F) NOFRAME=1;;              # ignore frame when building sr
	S) NOSTRAND=1;;             # ignore strand
	\? | h) echo $USAGE; exit 2;;
    esac
done
shift `expr $OPTIND - 1`;

# -- program ----------------------------------------------------------

# get query info from blast file
query=`gawk '$1=="Query="{print $2;exit}'`
lquery=`gawk '$1=="Query="{while ($0 !~ "letters") {getline};ls=substr($1,2);gsub(/,/,"",ls); print ls;exit}'`


#HSP
blast2hsp > $OFN.hspo
echo hsps `wc $OFN.hspo | gawk '{print $1}'`  1>&2

# gouping hsp options. Modify hsp file as needed.
# Apply cutoffs

gawk "\$7>=$S_CUTOFF && \$10<=$P_CUTOFF && \$12>=$I_CUTOFF && \$4-\$3>=$L_CUTOFF" $OFN.hspo | sort +2 -n > $OFN.hsp 

echo hsps `wc $OFN.hsp | gawk '{print $1}'`  1>&2
if [ ! -z "$EST" ]   # est mode
then
    # check if the est2unigene file exists and it is readable
    if [ ! -r "$UG_FILE" ]
    then
	touch $OFN.ug
	if [ ! -z "$UG" ]
	then 
	    echo "WARNING: the unigene file does not exist or is not readable. Proceed without it" 1>&2
	fi
	hsp2ehsp-v3 $OFN.ug $OFN.hsp | sort +2 -n > $TMP/$$t.hsp.$$
    else
	hsp2ehsp-v3 $UG_FILE $OFN.hsp | sort +2 -n > $TMP/$$t.hsp.$$
    fi
    mv $TMP/$$t.hsp.$$ $OFN.hsp
fi

if [ ! -z "$NOSTRAND" ]   # ignore strand
then
    gawk "{\$$HSP_STRAND=\"\+\"; print \$0}" $OFN.hsp > $TMP/$$t.hsp
    mv $TMP/$$t.hsp $OFN.hsp
fi


if [ ! -z "$NOFRAME" ]  # ignore frame
then
    gawk "{\$$HSP_FRAME=\"0\"; print \$0}" $OFN.hsp > $TMP/$$t.hsp
    mv $TMP/$$t.hsp $OFN.hsp
fi


#SR
hsp2sr-p-v1  $OFN.hsp | sort +2 -n  > $OFN.sr
echo sr `wc $OFN.sr | gawk '{print $1}'` 1>&2

#CSR

if [ ! -z "$NOFRAME_G" ]  # ignore frame
then
    sr2csr-f $OFFSET  $OFN.sr | sort +3 -n > $OFN.csr 
else
    sr2csr $OFFSET  $OFN.sr | sort +3 -n > $OFN.csr 
fi

echo csr `wc $OFN.csr | gawk '{print $1}'` 1>&2

#CCSR
csr2ccsr $OFN.csr > $OFN.ccsr 
echo ccsr `wc $OFN.ccsr | gawk '{print $1}'` 1>&2

# now call, ccsr2gff and hsp2gff
ccsr2gff seqname=$query $OFN.ccsr 


if [ ! -z "$HSPGFF" ] 
then
    hsp2gff seqname=$query group=$HSP_GROUP $OFN.hspo
fi

if [ ! -z "$HSPGFFG" ] 
then
    hsp2gff seqname=$query $OFN.hsp
fi


# PSC
if [ ! -z "$PSC" ]
then
    if [ ! -z "$RG" ]
    then
	RG_OP=" -g $RG_FILE "
    fi

lgquery=`echo $lquery | gawk "{print lq = (\\\$1 < $MINLQUERY) ? $MINLQUERY : \\\$1}"`
sed 's/\#[^\#]*$//' $OFN.ccsr | ccsr2psc.sh -m $lgquery -n "$query" -nl `expr $lgquery + 100`  $RG_OP  > $PSC_FILE.ps
fi



    
