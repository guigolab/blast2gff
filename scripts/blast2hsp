#! /usr/local/bin/gawk -f
# rgs and mba, sb and imim, july 1998
# reads a [t]blast[xn] file and produces an hsp file
BEGIN{
  #defaults
  NOFRAME=0;    # default noframe
  NOSTRAND="X"; # default nostrand
  OFS_2=";";    # secondary output separator in downstream blast2gff scripts

  strand["Plus"]="+";
  strand["Minus"]="-";
}

{
  if (NR==1) 
    program=$1;
  else if (substr($0,1,8)=="Database") {
    nd=split($2,dbpath,"/");
    db=dbpath[nd];
  }

  if (substr($1,1,1) == ">") {
    if (p1)
      PrintMatch();
    p1=q1="";
    locusdef="";

    # search for locus and definition 
    locus=$1;
    gsub(/>/,"",locus);
    
    # get the whole definition, including locus (more locus can appear def)
    while (NF>0){
      locusdef=locusdef " " $0;
      lseq=$NF; #assumes last field is length of match sequence
      getline;
    }
    gsub(/ +/," ",locusdef); #strip of unnecessary blanks
  }

  else if ($1=="Score") {
    if (p1)
      PrintMatch();
    p1=q1="";
    score = $3;
    bits  = substr($4,2);
    expect= substr($8,1,length($8)-1);
    prob  = $NF;
  }

  else if ($1=="Identities") {
    gsub(/\,/,"",$4);
    identities=substr($4,2,length($4)-3);
    gsub(/\,/,"",$8);
    positives=substr($8,2,length($8)-3);

    # what follows depends on the blast program
    if ($9=="Strand") { # blastn
      strand_p = strand[$11];
      frame_p  = NOFRAME;
      strand_q = strand[$13];
      frame_q  = NOFRAME;
    }
    else { # blastx or tblastx
      strand_p = substr($11,1,1);
      frame_p = substr($11,2,1);
      if (substr($13,1,1)) { # tblastx
	strand_q = substr($13,1,1);
	frame_q = substr($13,2,1);
      }
      else { # blastx
	strand_q = NOSTRAND;
	frame_q = NOFRAME;
      }
    }
  }

  else if (substr($0,1,6)=="Query:") {
    p2=$4;
    if (!p1)
      p1=$2;
  }

  else if (substr($0,1,6)=="Sbjct:") {
    q2=$4;
    if (!q1)
      q1=$2;
  }

}

END {
  PrintMatch();
}

function PrintMatch_s(){
  gsub(OFS_2, " ",locusdef); # eliminate OFS_2 used afterwards from def
  print locus, locusdef;
}

function PrintMatch () {
  gsub(OFS_2, " ",locusdef); # eliminate OFS_2 used afterwards from def
  if (strand_p=="-") { # print always smaller position first
    p=p1;p1=p2;p2=p;
  }

  if (strand_q=="-") {
    q=q1;q1=q2;q2=q;
  }
  print program, db, p1, p2, strand_p, frame_p, score, bits, expect, prob, identities, positives, locus, q1, q2, strand_q, frame_q, lseq, locusdef;
}
